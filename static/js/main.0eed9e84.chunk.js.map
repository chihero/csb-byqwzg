{"version":3,"sources":["app/Navbar.js","components/Spinner.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","api/client.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/SinglePostPage.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","Spinner","text","size","header","style","height","width","PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","client","endpoint","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","status","url","Error","statusText","Promise","reject","message","get","post","fetchPosts","createAsyncThunk","addNewPost","initialPost","postsSlice","createSlice","initialState","posts","error","reducers","reactionAdded","action","payload","postId","reaction","existingPost","reactions","postUpdated","content","extraReducers","builder","addCase","pending","fulfilled","concat","rejected","push","actions","postAdded","selectAllPosts","selectPostById","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","type","onClick","PostExcerpt","substring","PostsList","postStatus","useEffect","slice","sort","a","b","localeCompare","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","unwrap","console","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","EditPostForm","match","params","history","useHistory","SinglePostPage","App","seedDate","exact","path","render","Fragment","component","fetchUsers","usersSlice","configureStore","reducer","postsReducer","usersReducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","db","factory","primaryKey","nanoid","firstName","String","lastName","username","manyOf","oneOf","comments","comment","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","req","res","ctx","getAll","delay","findFirst","where","equals","patch","updatedPost","update","notifications","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","sendMessage","on","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0eed9e84.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react'\n\nexport const Spinner = ({ text = '', size = '5em' }) => {\n  const header = text ? <h4>{text}</h4> : null\n  return (\n    <div className=\"spinner\">\n      {header}\n      <div className=\"loader\" style={{ height: size, width: size }} />\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const PostAuthor = ({ userId }) => {\n  const author = useSelector((state) =>\n    state.users.find((user) => user.id === userId)\n  )\n\n  return <span>by {author ? author.name : 'Unknown author'}</span>\n}\n","import React from 'react'\nimport { parseISO, formatDistanceToNow } from 'date-fns'\n\nexport const TimeAgo = ({ timestamp }) => {\n  let timeAgo = ''\n  if (timestamp) {\n    const date = parseISO(timestamp)\n    const timePeriod = formatDistanceToNow(date)\n    timeAgo = `${timePeriod} ago`\n  }\n\n  return (\n    <span title={timestamp}>\n      &nbsp; <i>{timeAgo}</i>\n    </span>\n  )\n}\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      // Return a result object similar to Axios\n      return {\n        status: response.status,\n        data,\n        headers: response.headers,\n        url: response.url,\n      }\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null,\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (initialPost) => {\n    const response = await client.post('/fakeApi/posts', initialPost)\n    return response.data\n  }\n)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.posts.find((post) => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.posts.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // Add any fetched posts to the array\n        state.posts = state.posts.concat(action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n      .addCase(addNewPost.fulfilled, (state, action) => {\n        state.posts.push(action.payload)\n      })\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\nexport const selectAllPosts = (state) => state.posts.posts\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId)\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { reactionAdded } from './postsSlice'\n\nconst reactionEmoji = {\n  thumbsUp: '👍',\n  hooray: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀',\n}\n\nexport const ReactionButtons = ({ post }) => {\n  const dispatch = useDispatch()\n\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\n    return (\n      <button\n        key={name}\n        type=\"button\"\n        className=\"muted-button reaction-button\"\n        onClick={() =>\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\n        }\n      >\n        {emoji} {post.reactions[name]}\n      </button>\n    )\n  })\n\n  return <div>{reactionButtons}</div>\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { Spinner } from '../../components/Spinner'\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectAllPosts, fetchPosts } from './postsSlice'\n\nconst PostExcerpt = ({ post }) => {\n  return (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n\n      <ReactionButtons post={post} />\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\n        View Post\n      </Link>\n    </article>\n  )\n}\n\nexport const PostsList = () => {\n  const dispatch = useDispatch()\n  const posts = useSelector(selectAllPosts)\n\n  const postStatus = useSelector((state) => state.posts.status)\n  const error = useSelector((state) => state.posts.error)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n\n  let content\n\n  if (postStatus === 'loading') {\n    content = <Spinner text=\"Loading...\" />\n  } else if (postStatus === 'succeeded') {\n    // Sort posts in reverse chronological order by datetime string\n    const orderedPosts = posts\n      .slice()\n      .sort((a, b) => b.date.localeCompare(a.date))\n\n    content = orderedPosts.map((post) => (\n      <PostExcerpt key={post.id} post={post} />\n    ))\n  } else if (postStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { addNewPost } from './postsSlice'\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [userId, setUserId] = useState('')\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\n\n  const dispatch = useDispatch()\n  const users = useSelector((state) => state.users)\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n  const onAuthorChanged = (e) => setUserId(e.target.value)\n\n  const canSave =\n    [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus('pending')\n        await dispatch(addNewPost({ title, content, user: userId })).unwrap()\n        setTitle('')\n        setContent('')\n        setUserId('')\n      } catch (err) {\n        console.error('Failed to save the post: ', err)\n      } finally {\n        setAddRequestStatus('idle')\n      }\n    }\n  }\n\n  const usersOptions = users.map((user) => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ))\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n          Save Post\n        </button>\n      </form>\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport { postUpdated, selectPostById } from './postsSlice'\n\nexport const EditPostForm = ({ match }) => {\n  const { postId } = match.params\n\n  const post = useSelector((state) => selectPostById(state, postId))\n\n  const [title, setTitle] = useState(post.title)\n  const [content, setContent] = useState(post.content)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n\n  const onSavePostClicked = () => {\n    if (title && content) {\n      dispatch(postUpdated({ id: postId, title, content }))\n      history.push(`/posts/${postId}`)\n    }\n  }\n\n  return (\n    <section>\n      <h2>Edit Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n      </form>\n      <button type=\"button\" onClick={onSavePostClicked}>\n        Save Post\n      </button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectPostById } from './postsSlice'\n\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params\n\n  const post = useSelector((state) => selectPostById(state, postId))\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <div>\n          <PostAuthor userId={post.user} />\n          <TimeAgo timestamp={post.date} />\n        </div>\n        <p className=\"post-content\">{post.content}</p>\n        <ReactionButtons post={post} />\n        <Link to={`/editPost/${post.id}`} className=\"button\">\n          Edit Post\n        </Link>\n      </article>\n    </section>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\n\nimport { PostsList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { EditPostForm } from './features/posts/EditPostForm'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst initialState = []\n\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.data\n})\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      return action.payload\n    })\n  },\n})\n\nexport default usersSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../features/posts/postsSlice'\nimport usersReducer from '../features/users/usersSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { worker } from './api/server'\n\nimport { fetchUsers } from './features/users/usersSlice'\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  store.dispatch(fetchUsers())\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nstart()\n"],"sourceRoot":""}